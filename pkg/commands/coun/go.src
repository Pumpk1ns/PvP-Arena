// Go v2.0
// Author: Unknown
// Updated by: Sentack
// Updates:
//   1/13/2000 : v2.0
//     - displays gump of all available locations (Stole from .goto command)
//     - Can now teleport other mobles with "Send" button in gump window (Got some help from .info Command)
//     - Updated and editied golocs.cfg to better work with gump

use npc;
use cfgfile;
use uo;
use basic;
use polsys;

include "include/math"; // Used for Mod
include "include/attributes";

const TEXTSTARTLOCY :=  70;  // The location of the top of the gump

var locationscount := 0;  // The number of locations found for this user
var pagecount := 1;       // The current developing page

var layout := array(      // The layout of the gump with text notes to be added later

"page 0",
"nodispose",
"resizepic 0 35 3600 330 480",
"gumppic 30 80 9504",
"gumppic 45 80 9504",
"gumppic 60 80 9504",
"gumppic 75 80 9504",
"gumppic 90 80 9504",
"gumppic 105 80 9504", // do konika(gump 5549)
"gumppic 200 80 9504", // od konika(gump 5549)
"gumppic 215 80 9504",
"gumppic 230 80 9504",
"gumppic 245 80 9504",
"gumppic 260 80 9504",
"gumppic 275 80 9504",
"gumppic 285 80 9504",
"gumppic 130 30 5549",

"text 50 59 85 0",
"text 200 59 85 1",
"text 260 59 85 2",
"text 15 485 70 3"
);

var data := array(      // The data array that holds all the text to be displayed in the gump
       "Miejsce:",         //0
       "Goto",
       "Wyslij",
       "go ver 1.0 [by xst]"
);

program textcmd_go( who, text )
  // Test to see if the user sent a location via command text.  if not show gump, else attempt travel to that location
  if(!text)
    // The name of the current user of this command
    var tname := lower(who.name);
    // Create the Array
    FillInArrays( tname );
    // Display the array and receive a responce from the player
    var result := SendDialogGump( who, layout, data );
    // If the user canceled, quit
    if (result[0] == 0)
      return;
    endif
    // Open files and set veriables
    var locs    := ReadConfigFile("golocs");
    var MaxLocs := GetConfigMaxIntKey(locs)+1;
    var dest    := locs[mod(result[0], MaxLocs)];
    var traveler;
    // Determine if we are teleporting ourselves or someone other and set the traveler variable
    if ( result[0] > MaxLocs ) // teleporting someone else
       SendSysMessage( who, "Wskaz cel...", FONT_NORMAL, COLOR_GREEN);
       traveler :=  Target( who, TGTOPT_NOCHECK_LOS );
       if(!traveler || !GetStrength(traveler))
         SendSysMessage( who, "Zle wybrales...", FONT_NORMAL, COLOR_RED);
         return;
       endif
    else
      // Teleporting ourself
      traveler := who;
    endif
    // Teleport moble
    MoveObjectToLocation( traveler, dest.x, dest.y, dest.z, traveler.realm, 4 );
//    MoveObjectToLocation(traveler, dest.x, dest.y, dest.z, MOVECHAR_FORCELOCATION);
  else
    text := lower( text );
    // Open files and set veriables
    var cfg := ReadConfigFile("golocs");
    var tname := lower(who.name);
    var elem;
    var cfglength := GetConfigMaxIntKey(cfg);
    var i;
    // Manual search through each text entry to see if it's the one
    for( i := 1; i <= cfglength; i := i + 1  )
      elem := cfg[i];
      if (elem.Name == text)
        // If name matches, make sure type does as well
        if ((elem.TYPE == "all") || (elem.TYPE == tname))
          // If so, teleport user
          MoveObjectToLocation( who, elem.x, elem.y, elem.z, who.realm, 4 );
//          MoveObjectToLocation(who, elem.x, elem.y, elem.z, MOVECHAR_FORCELOCATION);
          return;
        endif
      endif
    endfor
    // Warn user that command failed.
    SendSysMessage(who, "Nieznane miejsce...", FONT_NORMAL, COLOR_RED);
  endif
    UnloadConfigFile("::golocs");
endprogram


function FillInArrays( tname )

    var telelocations := ReadConfigFile("golocs");
    var datalen;
    var layoutlen;
    var prev_y := CInt(TEXTSTARTLOCY);
    var datindx := 2;
    var buttonret := 1;
    var i;
    var numlocations := GetConfigMaxIntKey(telelocations);
    var currloc;

    for( i := 1; i <= numlocations; i := i + 1  )
      currloc := telelocations[i];

      if ((currloc.TYPE == "all") || (currloc.TYPE == tname))
        locationscount := locationscount + 1;

        datalen := GetDataLength();
        layoutlen := GetLayoutLength();

        // Store Name
        datindx := datalen+1;
        data[datindx] := currloc.Name;

        if (mod(locationscount, 19) == 1)

          // Pointer Down
          if (locationscount >= 19)
            layout[GetLayoutLength()+1] := "button 295 465 2648 2647 0 " + (pagecount);
          endif

          // Set Page Number
          layout[GetLayoutLength()+1] := "page " + pagecount;
          pagecount := pagecount + 1;
          prev_y := TEXTSTARTLOCY;

          if (locationscount > 19)
            // Pointer Up
            if( i > 19)
              layout[GetLayoutLength()+1] := "button 295 90 2650 2651 0 " + (pagecount - 2);
            endif
          endif
        endif

        layout[GetLayoutLength()+1] := ("text 50 " + CStr(prev_y + 20) + " 100 " + datalen);
        layout[GetLayoutLength()+1] := ("button 200 " + CStr(prev_y + 20) + " 2708 2709 1 0 " + ((buttonret+1) / 2)); // Go Button
        layout[GetLayoutLength()+1] := ("button 260 " + CStr(prev_y + 20) + " 2708 2709 1 0 " + (((buttonret+1) / 2) + numlocations+1)); // Send Button

        prev_y := prev_y + 20;
      endif

      buttonret := buttonret + 2;
    endfor

endfunction

// Returns the Length of the Layout Gump Array
function GetLayoutLength();
    return (len(layout));
endfunction

// Returns the length of the Names Array that populates the gump.
function GetDataLength();
    return (len(data));
endfunction
